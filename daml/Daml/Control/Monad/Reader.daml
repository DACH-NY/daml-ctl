module Daml.Control.Monad.Reader where

newtype ReaderT a m b = ReaderT { run : a -> m b } deriving Functor

instance (Applicative m) => Applicative (ReaderT a m) where
  pure = ReaderT Prelude.. const Prelude.. pure
  ReaderT f <*> ReaderT g = ReaderT \x -> f x <*> g x

instance (Action m) => Action (ReaderT a m) where
  m >>= f = ReaderT \r ->
    do
    a <- run m r
    run (f a) r
